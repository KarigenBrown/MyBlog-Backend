/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables.pojos;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import me.myblog.framework.domain.jooq.tables.interfaces.IUser;


/**
 * 用户表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user",
    schema = "myblog"
)
public class User implements IUser {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final String userName;
    private final String nickName;
    private final String password;
    private final String type;
    private final String status;
    private final String email;
    private final String phonenumber;
    private final String sex;
    private final String avatar;
    private final Long createBy;
    private final LocalDateTime createTime;
    private final Long updateBy;
    private final LocalDateTime updateTime;

    public User(IUser value) {
        this.id = value.getId();
        this.userName = value.getUserName();
        this.nickName = value.getNickName();
        this.password = value.getPassword();
        this.type = value.getType();
        this.status = value.getStatus();
        this.email = value.getEmail();
        this.phonenumber = value.getPhonenumber();
        this.sex = value.getSex();
        this.avatar = value.getAvatar();
        this.createBy = value.getCreateBy();
        this.createTime = value.getCreateTime();
        this.updateBy = value.getUpdateBy();
        this.updateTime = value.getUpdateTime();
    }

    public User(
        Long id,
        String userName,
        String nickName,
        String password,
        String type,
        String status,
        String email,
        String phonenumber,
        String sex,
        String avatar,
        Long createBy,
        LocalDateTime createTime,
        Long updateBy,
        LocalDateTime updateTime
    ) {
        this.id = id;
        this.userName = userName;
        this.nickName = nickName;
        this.password = password;
        this.type = type;
        this.status = status;
        this.email = email;
        this.phonenumber = phonenumber;
        this.sex = sex;
        this.avatar = avatar;
        this.createBy = createBy;
        this.createTime = createTime;
        this.updateBy = updateBy;
        this.updateTime = updateTime;
    }

    /**
     * Getter for <code>myblog.user.id</code>. 主键
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>myblog.user.user_name</code>. 用户名
     */
    @Column(name = "user_name", length = 64)
    @Size(max = 64)
    @Override
    public String getUserName() {
        return this.userName;
    }

    /**
     * Getter for <code>myblog.user.nick_name</code>. 昵称
     */
    @Column(name = "nick_name", length = 64)
    @Size(max = 64)
    @Override
    public String getNickName() {
        return this.nickName;
    }

    /**
     * Getter for <code>myblog.user.password</code>. 密码
     */
    @Column(name = "password", length = 64)
    @Size(max = 64)
    @Override
    public String getPassword() {
        return this.password;
    }

    /**
     * Getter for <code>myblog.user.type</code>. 用户类型（0代表普通用户，1代表管理员）
     */
    @Column(name = "type", length = 1)
    @Size(max = 1)
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Getter for <code>myblog.user.status</code>. 账号状态（0正常，1停用）
     */
    @Column(name = "status", length = 1)
    @Size(max = 1)
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Getter for <code>myblog.user.email</code>. 邮箱
     */
    @Column(name = "email", length = 64)
    @Size(max = 64)
    @Override
    public String getEmail() {
        return this.email;
    }

    /**
     * Getter for <code>myblog.user.phonenumber</code>. 手机号
     */
    @Column(name = "phonenumber", length = 32)
    @Size(max = 32)
    @Override
    public String getPhonenumber() {
        return this.phonenumber;
    }

    /**
     * Getter for <code>myblog.user.sex</code>. 用户性别（0男，1女，2未知）
     */
    @Column(name = "sex", length = 1)
    @Size(max = 1)
    @Override
    public String getSex() {
        return this.sex;
    }

    /**
     * Getter for <code>myblog.user.avatar</code>. 头像
     */
    @Column(name = "avatar", length = 128)
    @Size(max = 128)
    @Override
    public String getAvatar() {
        return this.avatar;
    }

    /**
     * Getter for <code>myblog.user.create_by</code>. 创建人的用户id
     */
    @Column(name = "create_by")
    @Override
    public Long getCreateBy() {
        return this.createBy;
    }

    /**
     * Getter for <code>myblog.user.create_time</code>. 创建时间
     */
    @Column(name = "create_time")
    @Override
    public LocalDateTime getCreateTime() {
        return this.createTime;
    }

    /**
     * Getter for <code>myblog.user.update_by</code>. 更新人
     */
    @Column(name = "update_by")
    @Override
    public Long getUpdateBy() {
        return this.updateBy;
    }

    /**
     * Getter for <code>myblog.user.update_time</code>. 更新时间
     */
    @Column(name = "update_time")
    @Override
    public LocalDateTime getUpdateTime() {
        return this.updateTime;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final User other = (User) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.userName == null) {
            if (other.userName != null)
                return false;
        }
        else if (!this.userName.equals(other.userName))
            return false;
        if (this.nickName == null) {
            if (other.nickName != null)
                return false;
        }
        else if (!this.nickName.equals(other.nickName))
            return false;
        if (this.password == null) {
            if (other.password != null)
                return false;
        }
        else if (!this.password.equals(other.password))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.email == null) {
            if (other.email != null)
                return false;
        }
        else if (!this.email.equals(other.email))
            return false;
        if (this.phonenumber == null) {
            if (other.phonenumber != null)
                return false;
        }
        else if (!this.phonenumber.equals(other.phonenumber))
            return false;
        if (this.sex == null) {
            if (other.sex != null)
                return false;
        }
        else if (!this.sex.equals(other.sex))
            return false;
        if (this.avatar == null) {
            if (other.avatar != null)
                return false;
        }
        else if (!this.avatar.equals(other.avatar))
            return false;
        if (this.createBy == null) {
            if (other.createBy != null)
                return false;
        }
        else if (!this.createBy.equals(other.createBy))
            return false;
        if (this.createTime == null) {
            if (other.createTime != null)
                return false;
        }
        else if (!this.createTime.equals(other.createTime))
            return false;
        if (this.updateBy == null) {
            if (other.updateBy != null)
                return false;
        }
        else if (!this.updateBy.equals(other.updateBy))
            return false;
        if (this.updateTime == null) {
            if (other.updateTime != null)
                return false;
        }
        else if (!this.updateTime.equals(other.updateTime))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.userName == null) ? 0 : this.userName.hashCode());
        result = prime * result + ((this.nickName == null) ? 0 : this.nickName.hashCode());
        result = prime * result + ((this.password == null) ? 0 : this.password.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.email == null) ? 0 : this.email.hashCode());
        result = prime * result + ((this.phonenumber == null) ? 0 : this.phonenumber.hashCode());
        result = prime * result + ((this.sex == null) ? 0 : this.sex.hashCode());
        result = prime * result + ((this.avatar == null) ? 0 : this.avatar.hashCode());
        result = prime * result + ((this.createBy == null) ? 0 : this.createBy.hashCode());
        result = prime * result + ((this.createTime == null) ? 0 : this.createTime.hashCode());
        result = prime * result + ((this.updateBy == null) ? 0 : this.updateBy.hashCode());
        result = prime * result + ((this.updateTime == null) ? 0 : this.updateTime.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("User (");

        sb.append(id);
        sb.append(", ").append(userName);
        sb.append(", ").append(nickName);
        sb.append(", ").append(password);
        sb.append(", ").append(type);
        sb.append(", ").append(status);
        sb.append(", ").append(email);
        sb.append(", ").append(phonenumber);
        sb.append(", ").append(sex);
        sb.append(", ").append(avatar);
        sb.append(", ").append(createBy);
        sb.append(", ").append(createTime);
        sb.append(", ").append(updateBy);
        sb.append(", ").append(updateTime);

        sb.append(")");
        return sb.toString();
    }
}
