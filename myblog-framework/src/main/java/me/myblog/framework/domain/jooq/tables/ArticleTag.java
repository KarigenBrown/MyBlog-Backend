/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables;


import java.util.function.Function;

import me.myblog.framework.domain.jooq.Keys;
import me.myblog.framework.domain.jooq.Myblog;
import me.myblog.framework.domain.jooq.tables.records.ArticleTagRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 文章标签关联表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ArticleTag extends TableImpl<ArticleTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>myblog.article_tag</code>
     */
    public static final ArticleTag ARTICLE_TAG = new ArticleTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleTagRecord> getRecordType() {
        return ArticleTagRecord.class;
    }

    /**
     * The column <code>myblog.article_tag.article_id</code>. 文章id
     */
    public final TableField<ArticleTagRecord, Long> ARTICLE_ID = createField(DSL.name("article_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "文章id");

    /**
     * The column <code>myblog.article_tag.tag_id</code>. 标签id
     */
    public final TableField<ArticleTagRecord, Long> TAG_ID = createField(DSL.name("tag_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "标签id");

    private ArticleTag(Name alias, Table<ArticleTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArticleTag(Name alias, Table<ArticleTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("文章标签关联表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>myblog.article_tag</code> table reference
     */
    public ArticleTag(String alias) {
        this(DSL.name(alias), ARTICLE_TAG);
    }

    /**
     * Create an aliased <code>myblog.article_tag</code> table reference
     */
    public ArticleTag(Name alias) {
        this(alias, ARTICLE_TAG);
    }

    /**
     * Create a <code>myblog.article_tag</code> table reference
     */
    public ArticleTag() {
        this(DSL.name("article_tag"), null);
    }

    public <O extends Record> ArticleTag(Table<O> child, ForeignKey<O, ArticleTagRecord> key) {
        super(child, key, ARTICLE_TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Myblog.MYBLOG;
    }

    @Override
    public Identity<ArticleTagRecord, Long> getIdentity() {
        return (Identity<ArticleTagRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArticleTagRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLE_TAG_PRIMARY;
    }

    @Override
    public ArticleTag as(String alias) {
        return new ArticleTag(DSL.name(alias), this);
    }

    @Override
    public ArticleTag as(Name alias) {
        return new ArticleTag(alias, this);
    }

    @Override
    public ArticleTag as(Table<?> alias) {
        return new ArticleTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleTag rename(String name) {
        return new ArticleTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleTag rename(Name name) {
        return new ArticleTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticleTag rename(Table<?> name) {
        return new ArticleTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
