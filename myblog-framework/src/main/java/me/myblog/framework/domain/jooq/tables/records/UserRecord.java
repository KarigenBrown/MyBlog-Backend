/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import me.myblog.framework.domain.jooq.tables.User;
import me.myblog.framework.domain.jooq.tables.interfaces.IUser;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 用户表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user",
    schema = "myblog"
)
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record14<Long, String, String, String, String, String, String, String, String, String, Long, LocalDateTime, Long, LocalDateTime>, IUser {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>myblog.user.id</code>. 主键
     */
    public UserRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.id</code>. 主键
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>myblog.user.user_name</code>. 用户名
     */
    public UserRecord setUserName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.user_name</code>. 用户名
     */
    @Column(name = "user_name", length = 64)
    @Size(max = 64)
    @Override
    public String getUserName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>myblog.user.nick_name</code>. 昵称
     */
    public UserRecord setNickName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.nick_name</code>. 昵称
     */
    @Column(name = "nick_name", length = 64)
    @Size(max = 64)
    @Override
    public String getNickName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>myblog.user.password</code>. 密码
     */
    public UserRecord setPassword(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.password</code>. 密码
     */
    @Column(name = "password", length = 64)
    @Size(max = 64)
    @Override
    public String getPassword() {
        return (String) get(3);
    }

    /**
     * Setter for <code>myblog.user.type</code>. 用户类型（0代表普通用户，1代表管理员）
     */
    public UserRecord setType(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.type</code>. 用户类型（0代表普通用户，1代表管理员）
     */
    @Column(name = "type", length = 1)
    @Size(max = 1)
    @Override
    public String getType() {
        return (String) get(4);
    }

    /**
     * Setter for <code>myblog.user.status</code>. 账号状态（0正常，1停用）
     */
    public UserRecord setStatus(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.status</code>. 账号状态（0正常，1停用）
     */
    @Column(name = "status", length = 1)
    @Size(max = 1)
    @Override
    public String getStatus() {
        return (String) get(5);
    }

    /**
     * Setter for <code>myblog.user.email</code>. 邮箱
     */
    public UserRecord setEmail(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.email</code>. 邮箱
     */
    @Column(name = "email", length = 64)
    @Size(max = 64)
    @Override
    public String getEmail() {
        return (String) get(6);
    }

    /**
     * Setter for <code>myblog.user.phonenumber</code>. 手机号
     */
    public UserRecord setPhonenumber(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.phonenumber</code>. 手机号
     */
    @Column(name = "phonenumber", length = 32)
    @Size(max = 32)
    @Override
    public String getPhonenumber() {
        return (String) get(7);
    }

    /**
     * Setter for <code>myblog.user.sex</code>. 用户性别（0男，1女，2未知）
     */
    public UserRecord setSex(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.sex</code>. 用户性别（0男，1女，2未知）
     */
    @Column(name = "sex", length = 1)
    @Size(max = 1)
    @Override
    public String getSex() {
        return (String) get(8);
    }

    /**
     * Setter for <code>myblog.user.avatar</code>. 头像
     */
    public UserRecord setAvatar(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.avatar</code>. 头像
     */
    @Column(name = "avatar", length = 128)
    @Size(max = 128)
    @Override
    public String getAvatar() {
        return (String) get(9);
    }

    /**
     * Setter for <code>myblog.user.create_by</code>. 创建人的用户id
     */
    public UserRecord setCreateBy(Long value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.create_by</code>. 创建人的用户id
     */
    @Column(name = "create_by")
    @Override
    public Long getCreateBy() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>myblog.user.create_time</code>. 创建时间
     */
    public UserRecord setCreateTime(LocalDateTime value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.create_time</code>. 创建时间
     */
    @Column(name = "create_time")
    @Override
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>myblog.user.update_by</code>. 更新人
     */
    public UserRecord setUpdateBy(Long value) {
        set(12, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.update_by</code>. 更新人
     */
    @Column(name = "update_by")
    @Override
    public Long getUpdateBy() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>myblog.user.update_time</code>. 更新时间
     */
    public UserRecord setUpdateTime(LocalDateTime value) {
        set(13, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user.update_time</code>. 更新时间
     */
    @Column(name = "update_time")
    @Override
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, String, String, String, String, String, String, String, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Long, String, String, String, String, String, String, String, String, String, Long, LocalDateTime, Long, LocalDateTime> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return User.USER.ID;
    }

    @Override
    public Field<String> field2() {
        return User.USER.USER_NAME;
    }

    @Override
    public Field<String> field3() {
        return User.USER.NICK_NAME;
    }

    @Override
    public Field<String> field4() {
        return User.USER.PASSWORD;
    }

    @Override
    public Field<String> field5() {
        return User.USER.TYPE;
    }

    @Override
    public Field<String> field6() {
        return User.USER.STATUS;
    }

    @Override
    public Field<String> field7() {
        return User.USER.EMAIL;
    }

    @Override
    public Field<String> field8() {
        return User.USER.PHONENUMBER;
    }

    @Override
    public Field<String> field9() {
        return User.USER.SEX;
    }

    @Override
    public Field<String> field10() {
        return User.USER.AVATAR;
    }

    @Override
    public Field<Long> field11() {
        return User.USER.CREATE_BY;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return User.USER.CREATE_TIME;
    }

    @Override
    public Field<Long> field13() {
        return User.USER.UPDATE_BY;
    }

    @Override
    public Field<LocalDateTime> field14() {
        return User.USER.UPDATE_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getUserName();
    }

    @Override
    public String component3() {
        return getNickName();
    }

    @Override
    public String component4() {
        return getPassword();
    }

    @Override
    public String component5() {
        return getType();
    }

    @Override
    public String component6() {
        return getStatus();
    }

    @Override
    public String component7() {
        return getEmail();
    }

    @Override
    public String component8() {
        return getPhonenumber();
    }

    @Override
    public String component9() {
        return getSex();
    }

    @Override
    public String component10() {
        return getAvatar();
    }

    @Override
    public Long component11() {
        return getCreateBy();
    }

    @Override
    public LocalDateTime component12() {
        return getCreateTime();
    }

    @Override
    public Long component13() {
        return getUpdateBy();
    }

    @Override
    public LocalDateTime component14() {
        return getUpdateTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getUserName();
    }

    @Override
    public String value3() {
        return getNickName();
    }

    @Override
    public String value4() {
        return getPassword();
    }

    @Override
    public String value5() {
        return getType();
    }

    @Override
    public String value6() {
        return getStatus();
    }

    @Override
    public String value7() {
        return getEmail();
    }

    @Override
    public String value8() {
        return getPhonenumber();
    }

    @Override
    public String value9() {
        return getSex();
    }

    @Override
    public String value10() {
        return getAvatar();
    }

    @Override
    public Long value11() {
        return getCreateBy();
    }

    @Override
    public LocalDateTime value12() {
        return getCreateTime();
    }

    @Override
    public Long value13() {
        return getUpdateBy();
    }

    @Override
    public LocalDateTime value14() {
        return getUpdateTime();
    }

    @Override
    public UserRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public UserRecord value2(String value) {
        setUserName(value);
        return this;
    }

    @Override
    public UserRecord value3(String value) {
        setNickName(value);
        return this;
    }

    @Override
    public UserRecord value4(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public UserRecord value5(String value) {
        setType(value);
        return this;
    }

    @Override
    public UserRecord value6(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public UserRecord value7(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public UserRecord value8(String value) {
        setPhonenumber(value);
        return this;
    }

    @Override
    public UserRecord value9(String value) {
        setSex(value);
        return this;
    }

    @Override
    public UserRecord value10(String value) {
        setAvatar(value);
        return this;
    }

    @Override
    public UserRecord value11(Long value) {
        setCreateBy(value);
        return this;
    }

    @Override
    public UserRecord value12(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public UserRecord value13(Long value) {
        setUpdateBy(value);
        return this;
    }

    @Override
    public UserRecord value14(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public UserRecord values(Long value1, String value2, String value3, String value4, String value5, String value6, String value7, String value8, String value9, String value10, Long value11, LocalDateTime value12, Long value13, LocalDateTime value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IUser from) {
        setId(from.getId());
        setUserName(from.getUserName());
        setNickName(from.getNickName());
        setPassword(from.getPassword());
        setType(from.getType());
        setStatus(from.getStatus());
        setEmail(from.getEmail());
        setPhonenumber(from.getPhonenumber());
        setSex(from.getSex());
        setAvatar(from.getAvatar());
        setCreateBy(from.getCreateBy());
        setCreateTime(from.getCreateTime());
        setUpdateBy(from.getUpdateBy());
        setUpdateTime(from.getUpdateTime());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(Long id, String userName, String nickName, String password, String type, String status, String email, String phonenumber, String sex, String avatar, Long createBy, LocalDateTime createTime, Long updateBy, LocalDateTime updateTime) {
        super(User.USER);

        setId(id);
        setUserName(userName);
        setNickName(nickName);
        setPassword(password);
        setType(type);
        setStatus(status);
        setEmail(email);
        setPhonenumber(phonenumber);
        setSex(sex);
        setAvatar(avatar);
        setCreateBy(createBy);
        setCreateTime(createTime);
        setUpdateBy(updateBy);
        setUpdateTime(updateTime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(me.myblog.framework.domain.jooq.tables.pojos.User value) {
        super(User.USER);

        if (value != null) {
            setId(value.getId());
            setUserName(value.getUserName());
            setNickName(value.getNickName());
            setPassword(value.getPassword());
            setType(value.getType());
            setStatus(value.getStatus());
            setEmail(value.getEmail());
            setPhonenumber(value.getPhonenumber());
            setSex(value.getSex());
            setAvatar(value.getAvatar());
            setCreateBy(value.getCreateBy());
            setCreateTime(value.getCreateTime());
            setUpdateBy(value.getUpdateBy());
            setUpdateTime(value.getUpdateTime());
            resetChangedOnNotNull();
        }
    }
}
