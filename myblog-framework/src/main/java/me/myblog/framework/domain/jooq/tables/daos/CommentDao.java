/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import me.myblog.framework.domain.jooq.tables.Comment;
import me.myblog.framework.domain.jooq.tables.records.CommentRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * 评论表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CommentDao extends DAOImpl<CommentRecord, me.myblog.framework.domain.jooq.tables.pojos.Comment, Long> {

    /**
     * Create a new CommentDao without any configuration
     */
    public CommentDao() {
        super(Comment.COMMENT, me.myblog.framework.domain.jooq.tables.pojos.Comment.class);
    }

    /**
     * Create a new CommentDao with an attached configuration
     */
    public CommentDao(Configuration configuration) {
        super(Comment.COMMENT, me.myblog.framework.domain.jooq.tables.pojos.Comment.class, configuration);
    }

    @Override
    public Long getId(me.myblog.framework.domain.jooq.tables.pojos.Comment object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Comment.COMMENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchById(Long... values) {
        return fetch(Comment.COMMENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public me.myblog.framework.domain.jooq.tables.pojos.Comment fetchOneById(Long value) {
        return fetchOne(Comment.COMMENT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchOptionalById(Long value) {
        return fetchOptional(Comment.COMMENT.ID, value);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfType(String lowerInclusive, String upperInclusive) {
        return fetchRange(Comment.COMMENT.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByType(String... values) {
        return fetch(Comment.COMMENT.TYPE, values);
    }

    /**
     * Fetch records that have <code>article_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfArticleId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Comment.COMMENT.ARTICLE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>article_id IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByArticleId(Long... values) {
        return fetch(Comment.COMMENT.ARTICLE_ID, values);
    }

    /**
     * Fetch records that have <code>root_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfRootId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Comment.COMMENT.ROOT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>root_id IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByRootId(Long... values) {
        return fetch(Comment.COMMENT.ROOT_ID, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Comment.COMMENT.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByContent(String... values) {
        return fetch(Comment.COMMENT.CONTENT, values);
    }

    /**
     * Fetch records that have <code>to_comment_user_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfToCommentUserId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Comment.COMMENT.TO_COMMENT_USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>to_comment_user_id IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByToCommentUserId(Long... values) {
        return fetch(Comment.COMMENT.TO_COMMENT_USER_ID, values);
    }

    /**
     * Fetch records that have <code>to_comment_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfToCommentId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Comment.COMMENT.TO_COMMENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>to_comment_id IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByToCommentId(Long... values) {
        return fetch(Comment.COMMENT.TO_COMMENT_ID, values);
    }

    /**
     * Fetch records that have <code>create_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfCreateBy(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Comment.COMMENT.CREATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_by IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByCreateBy(Long... values) {
        return fetch(Comment.COMMENT.CREATE_BY, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Comment.COMMENT.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByCreateTime(LocalDateTime... values) {
        return fetch(Comment.COMMENT.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>update_by BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfUpdateBy(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Comment.COMMENT.UPDATE_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_by IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByUpdateBy(Long... values) {
        return fetch(Comment.COMMENT.UPDATE_BY, values);
    }

    /**
     * Fetch records that have <code>update_time BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchRangeOfUpdateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Comment.COMMENT.UPDATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_time IN (values)</code>
     */
    public List<me.myblog.framework.domain.jooq.tables.pojos.Comment> fetchByUpdateTime(LocalDateTime... values) {
        return fetch(Comment.COMMENT.UPDATE_TIME, values);
    }
}
