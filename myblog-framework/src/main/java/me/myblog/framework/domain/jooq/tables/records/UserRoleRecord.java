/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;

import me.myblog.framework.domain.jooq.tables.UserRole;
import me.myblog.framework.domain.jooq.tables.interfaces.IUserRole;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 用户和角色关联表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "user_role",
    schema = "myblog"
)
public class UserRoleRecord extends UpdatableRecordImpl<UserRoleRecord> implements Record2<Long, Long>, IUserRole {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>myblog.user_role.user_id</code>. 用户ID
     */
    public UserRoleRecord setUserId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user_role.user_id</code>. 用户ID
     */
    @Column(name = "user_id", nullable = false)
    @NotNull
    @Override
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>myblog.user_role.role_id</code>. 角色ID
     */
    public UserRoleRecord setRoleId(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>myblog.user_role.role_id</code>. 角色ID
     */
    @Column(name = "role_id", nullable = false)
    @NotNull
    @Override
    public Long getRoleId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return UserRole.USER_ROLE.USER_ID;
    }

    @Override
    public Field<Long> field2() {
        return UserRole.USER_ROLE.ROLE_ID;
    }

    @Override
    public Long component1() {
        return getUserId();
    }

    @Override
    public Long component2() {
        return getRoleId();
    }

    @Override
    public Long value1() {
        return getUserId();
    }

    @Override
    public Long value2() {
        return getRoleId();
    }

    @Override
    public UserRoleRecord value1(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserRoleRecord value2(Long value) {
        setRoleId(value);
        return this;
    }

    @Override
    public UserRoleRecord values(Long value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(IUserRole from) {
        setUserId(from.getUserId());
        setRoleId(from.getRoleId());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRoleRecord
     */
    public UserRoleRecord() {
        super(UserRole.USER_ROLE);
    }

    /**
     * Create a detached, initialised UserRoleRecord
     */
    public UserRoleRecord(Long userId, Long roleId) {
        super(UserRole.USER_ROLE);

        setUserId(userId);
        setRoleId(roleId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UserRoleRecord
     */
    public UserRoleRecord(me.myblog.framework.domain.jooq.tables.pojos.UserRole value) {
        super(UserRole.USER_ROLE);

        if (value != null) {
            setUserId(value.getUserId());
            setRoleId(value.getRoleId());
            resetChangedOnNotNull();
        }
    }
}
