/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import me.myblog.framework.domain.jooq.Keys;
import me.myblog.framework.domain.jooq.Myblog;
import me.myblog.framework.domain.jooq.tables.records.ArticleRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 文章表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Article extends TableImpl<ArticleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>myblog.article</code>
     */
    public static final Article ARTICLE = new Article();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleRecord> getRecordType() {
        return ArticleRecord.class;
    }

    /**
     * The column <code>myblog.article.id</code>.
     */
    public final TableField<ArticleRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>myblog.article.title</code>. 标题
     */
    public final TableField<ArticleRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(256), this, "标题");

    /**
     * The column <code>myblog.article.content</code>. 文章内容
     */
    public final TableField<ArticleRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.CLOB, this, "文章内容");

    /**
     * The column <code>myblog.article.summary</code>. 文章摘要
     */
    public final TableField<ArticleRecord, String> SUMMARY = createField(DSL.name("summary"), SQLDataType.VARCHAR(1024), this, "文章摘要");

    /**
     * The column <code>myblog.article.category_id</code>. 所属分类id
     */
    public final TableField<ArticleRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT, this, "所属分类id");

    /**
     * The column <code>myblog.article.thumbnail</code>. 缩略图
     */
    public final TableField<ArticleRecord, String> THUMBNAIL = createField(DSL.name("thumbnail"), SQLDataType.VARCHAR(256), this, "缩略图");

    /**
     * The column <code>myblog.article.is_top</code>. 是否置顶（0否，1是）
     */
    public final TableField<ArticleRecord, String> IS_TOP = createField(DSL.name("is_top"), SQLDataType.CHAR(1).defaultValue(DSL.inline("0", SQLDataType.CHAR)), this, "是否置顶（0否，1是）");

    /**
     * The column <code>myblog.article.status</code>. 状态（0已发布，1草稿）
     */
    public final TableField<ArticleRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CHAR(1).defaultValue(DSL.inline("1", SQLDataType.CHAR)), this, "状态（0已发布，1草稿）");

    /**
     * The column <code>myblog.article.view_count</code>. 访问量
     */
    public final TableField<ArticleRecord, Long> VIEW_COUNT = createField(DSL.name("view_count"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "访问量");

    /**
     * The column <code>myblog.article.is_comment</code>. 是否允许评论（1是，0否）
     */
    public final TableField<ArticleRecord, String> IS_COMMENT = createField(DSL.name("is_comment"), SQLDataType.CHAR(1).defaultValue(DSL.inline("1", SQLDataType.CHAR)), this, "是否允许评论（1是，0否）");

    /**
     * The column <code>myblog.article.create_by</code>.
     */
    public final TableField<ArticleRecord, Long> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>myblog.article.create_time</code>.
     */
    public final TableField<ArticleRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>myblog.article.update_by</code>.
     */
    public final TableField<ArticleRecord, Long> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>myblog.article.update_time</code>.
     */
    public final TableField<ArticleRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "");

    private Article(Name alias, Table<ArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Article(Name alias, Table<ArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("文章表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>myblog.article</code> table reference
     */
    public Article(String alias) {
        this(DSL.name(alias), ARTICLE);
    }

    /**
     * Create an aliased <code>myblog.article</code> table reference
     */
    public Article(Name alias) {
        this(alias, ARTICLE);
    }

    /**
     * Create a <code>myblog.article</code> table reference
     */
    public Article() {
        this(DSL.name("article"), null);
    }

    public <O extends Record> Article(Table<O> child, ForeignKey<O, ArticleRecord> key) {
        super(child, key, ARTICLE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Myblog.MYBLOG;
    }

    @Override
    public Identity<ArticleRecord, Long> getIdentity() {
        return (Identity<ArticleRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ArticleRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLE_PRIMARY;
    }

    @Override
    public Article as(String alias) {
        return new Article(DSL.name(alias), this);
    }

    @Override
    public Article as(Name alias) {
        return new Article(alias, this);
    }

    @Override
    public Article as(Table<?> alias) {
        return new Article(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(String name) {
        return new Article(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(Name name) {
        return new Article(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(Table<?> name) {
        return new Article(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, String, Long, String, String, String, Long, String, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super String, ? super String, ? super Long, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
