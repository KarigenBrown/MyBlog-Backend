/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import me.myblog.framework.domain.jooq.Keys;
import me.myblog.framework.domain.jooq.Myblog;
import me.myblog.framework.domain.jooq.tables.records.MenuRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 菜单权限表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Menu extends TableImpl<MenuRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>myblog.menu</code>
     */
    public static final Menu MENU = new Menu();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MenuRecord> getRecordType() {
        return MenuRecord.class;
    }

    /**
     * The column <code>myblog.menu.id</code>. 菜单ID
     */
    public final TableField<MenuRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "菜单ID");

    /**
     * The column <code>myblog.menu.menu_name</code>. 菜单名称
     */
    public final TableField<MenuRecord, String> MENU_NAME = createField(DSL.name("menu_name"), SQLDataType.VARCHAR(50).nullable(false), this, "菜单名称");

    /**
     * The column <code>myblog.menu.parent_id</code>. 父菜单ID
     */
    public final TableField<MenuRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("0", SQLDataType.BIGINT)), this, "父菜单ID");

    /**
     * The column <code>myblog.menu.order_num</code>. 显示顺序
     */
    public final TableField<MenuRecord, Integer> ORDER_NUM = createField(DSL.name("order_num"), SQLDataType.INTEGER.defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "显示顺序");

    /**
     * The column <code>myblog.menu.path</code>. 路由地址
     */
    public final TableField<MenuRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR(200).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "路由地址");

    /**
     * The column <code>myblog.menu.component</code>. 组件路径
     */
    public final TableField<MenuRecord, String> COMPONENT = createField(DSL.name("component"), SQLDataType.VARCHAR(255), this, "组件路径");

    /**
     * The column <code>myblog.menu.is_frame</code>. 是否为外链（0是，1否）
     */
    public final TableField<MenuRecord, Integer> IS_FRAME = createField(DSL.name("is_frame"), SQLDataType.INTEGER.defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "是否为外链（0是，1否）");

    /**
     * The column <code>myblog.menu.menu_type</code>. 菜单类型（M目录，C菜单，F按钮）
     */
    public final TableField<MenuRecord, String> MENU_TYPE = createField(DSL.name("menu_type"), SQLDataType.CHAR(1).defaultValue(DSL.inline("", SQLDataType.CHAR)), this, "菜单类型（M目录，C菜单，F按钮）");

    /**
     * The column <code>myblog.menu.visible</code>. 菜单状态（0显示，1隐藏）
     */
    public final TableField<MenuRecord, String> VISIBLE = createField(DSL.name("visible"), SQLDataType.CHAR(1).defaultValue(DSL.inline("0", SQLDataType.CHAR)), this, "菜单状态（0显示，1隐藏）");

    /**
     * The column <code>myblog.menu.status</code>. 菜单状态（0正常，1停用）
     */
    public final TableField<MenuRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CHAR(1).defaultValue(DSL.inline("0", SQLDataType.CHAR)), this, "菜单状态（0正常，1停用）");

    /**
     * The column <code>myblog.menu.perms</code>. 权限标识
     */
    public final TableField<MenuRecord, String> PERMS = createField(DSL.name("perms"), SQLDataType.VARCHAR(100), this, "权限标识");

    /**
     * The column <code>myblog.menu.icon</code>. 菜单图标
     */
    public final TableField<MenuRecord, String> ICON = createField(DSL.name("icon"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("#", SQLDataType.VARCHAR)), this, "菜单图标");

    /**
     * The column <code>myblog.menu.create_by</code>. 创建者
     */
    public final TableField<MenuRecord, Long> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.BIGINT, this, "创建者");

    /**
     * The column <code>myblog.menu.create_time</code>. 创建时间
     */
    public final TableField<MenuRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "创建时间");

    /**
     * The column <code>myblog.menu.update_by</code>. 更新者
     */
    public final TableField<MenuRecord, Long> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.BIGINT, this, "更新者");

    /**
     * The column <code>myblog.menu.update_time</code>. 更新时间
     */
    public final TableField<MenuRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "更新时间");

    /**
     * The column <code>myblog.menu.remark</code>. 备注
     */
    public final TableField<MenuRecord, String> REMARK = createField(DSL.name("remark"), SQLDataType.VARCHAR(500).defaultValue(DSL.inline("", SQLDataType.VARCHAR)), this, "备注");

    private Menu(Name alias, Table<MenuRecord> aliased) {
        this(alias, aliased, null);
    }

    private Menu(Name alias, Table<MenuRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("菜单权限表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>myblog.menu</code> table reference
     */
    public Menu(String alias) {
        this(DSL.name(alias), MENU);
    }

    /**
     * Create an aliased <code>myblog.menu</code> table reference
     */
    public Menu(Name alias) {
        this(alias, MENU);
    }

    /**
     * Create a <code>myblog.menu</code> table reference
     */
    public Menu() {
        this(DSL.name("menu"), null);
    }

    public <O extends Record> Menu(Table<O> child, ForeignKey<O, MenuRecord> key) {
        super(child, key, MENU);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Myblog.MYBLOG;
    }

    @Override
    public Identity<MenuRecord, Long> getIdentity() {
        return (Identity<MenuRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<MenuRecord> getPrimaryKey() {
        return Keys.KEY_MENU_PRIMARY;
    }

    @Override
    public Menu as(String alias) {
        return new Menu(DSL.name(alias), this);
    }

    @Override
    public Menu as(Name alias) {
        return new Menu(alias, this);
    }

    @Override
    public Menu as(Table<?> alias) {
        return new Menu(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(String name) {
        return new Menu(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(Name name) {
        return new Menu(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Menu rename(Table<?> name) {
        return new Menu(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Long, String, Long, Integer, String, String, Integer, String, String, String, String, String, Long, LocalDateTime, Long, LocalDateTime, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super Long, ? super String, ? super Long, ? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super Long, ? super String, ? super Long, ? super Integer, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
