/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import me.myblog.framework.domain.jooq.tables.Category;
import me.myblog.framework.domain.jooq.tables.interfaces.ICategory;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record9;
import org.jooq.Row9;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 分类表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "category",
    schema = "myblog"
)
public class CategoryRecord extends UpdatableRecordImpl<CategoryRecord> implements Record9<Long, String, Long, String, String, Long, LocalDateTime, Long, LocalDateTime>, ICategory {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>myblog.category.id</code>.
     */
    public CategoryRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>myblog.category.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>myblog.category.name</code>. 分类名
     */
    public CategoryRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>myblog.category.name</code>. 分类名
     */
    @Column(name = "name", length = 128)
    @Size(max = 128)
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>myblog.category.pid</code>. 父分类id，如果没有父分类为-1
     */
    public CategoryRecord setPid(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>myblog.category.pid</code>. 父分类id，如果没有父分类为-1
     */
    @Column(name = "pid")
    @Override
    public Long getPid() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>myblog.category.description</code>. 描述
     */
    public CategoryRecord setDescription(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>myblog.category.description</code>. 描述
     */
    @Column(name = "description", length = 512)
    @Size(max = 512)
    @Override
    public String getDescription() {
        return (String) get(3);
    }

    /**
     * Setter for <code>myblog.category.status</code>. 状态（0正常，1禁用）
     */
    public CategoryRecord setStatus(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>myblog.category.status</code>. 状态（0正常，1禁用）
     */
    @Column(name = "status", length = 1)
    @Size(max = 1)
    @Override
    public String getStatus() {
        return (String) get(4);
    }

    /**
     * Setter for <code>myblog.category.create_by</code>.
     */
    public CategoryRecord setCreateBy(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>myblog.category.create_by</code>.
     */
    @Column(name = "create_by")
    @Override
    public Long getCreateBy() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>myblog.category.create_time</code>.
     */
    public CategoryRecord setCreateTime(LocalDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>myblog.category.create_time</code>.
     */
    @Column(name = "create_time")
    @Override
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>myblog.category.update_by</code>.
     */
    public CategoryRecord setUpdateBy(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>myblog.category.update_by</code>.
     */
    @Column(name = "update_by")
    @Override
    public Long getUpdateBy() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>myblog.category.update_time</code>.
     */
    public CategoryRecord setUpdateTime(LocalDateTime value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>myblog.category.update_time</code>.
     */
    @Column(name = "update_time")
    @Override
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(8);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record9 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, Long, String, String, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    @Override
    public Row9<Long, String, Long, String, String, Long, LocalDateTime, Long, LocalDateTime> valuesRow() {
        return (Row9) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Category.CATEGORY.ID;
    }

    @Override
    public Field<String> field2() {
        return Category.CATEGORY.NAME;
    }

    @Override
    public Field<Long> field3() {
        return Category.CATEGORY.PID;
    }

    @Override
    public Field<String> field4() {
        return Category.CATEGORY.DESCRIPTION;
    }

    @Override
    public Field<String> field5() {
        return Category.CATEGORY.STATUS;
    }

    @Override
    public Field<Long> field6() {
        return Category.CATEGORY.CREATE_BY;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Category.CATEGORY.CREATE_TIME;
    }

    @Override
    public Field<Long> field8() {
        return Category.CATEGORY.UPDATE_BY;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return Category.CATEGORY.UPDATE_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Long component3() {
        return getPid();
    }

    @Override
    public String component4() {
        return getDescription();
    }

    @Override
    public String component5() {
        return getStatus();
    }

    @Override
    public Long component6() {
        return getCreateBy();
    }

    @Override
    public LocalDateTime component7() {
        return getCreateTime();
    }

    @Override
    public Long component8() {
        return getUpdateBy();
    }

    @Override
    public LocalDateTime component9() {
        return getUpdateTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Long value3() {
        return getPid();
    }

    @Override
    public String value4() {
        return getDescription();
    }

    @Override
    public String value5() {
        return getStatus();
    }

    @Override
    public Long value6() {
        return getCreateBy();
    }

    @Override
    public LocalDateTime value7() {
        return getCreateTime();
    }

    @Override
    public Long value8() {
        return getUpdateBy();
    }

    @Override
    public LocalDateTime value9() {
        return getUpdateTime();
    }

    @Override
    public CategoryRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CategoryRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CategoryRecord value3(Long value) {
        setPid(value);
        return this;
    }

    @Override
    public CategoryRecord value4(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public CategoryRecord value5(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public CategoryRecord value6(Long value) {
        setCreateBy(value);
        return this;
    }

    @Override
    public CategoryRecord value7(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public CategoryRecord value8(Long value) {
        setUpdateBy(value);
        return this;
    }

    @Override
    public CategoryRecord value9(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public CategoryRecord values(Long value1, String value2, Long value3, String value4, String value5, Long value6, LocalDateTime value7, Long value8, LocalDateTime value9) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(ICategory from) {
        setId(from.getId());
        setName(from.getName());
        setPid(from.getPid());
        setDescription(from.getDescription());
        setStatus(from.getStatus());
        setCreateBy(from.getCreateBy());
        setCreateTime(from.getCreateTime());
        setUpdateBy(from.getUpdateBy());
        setUpdateTime(from.getUpdateTime());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CategoryRecord
     */
    public CategoryRecord() {
        super(Category.CATEGORY);
    }

    /**
     * Create a detached, initialised CategoryRecord
     */
    public CategoryRecord(Long id, String name, Long pid, String description, String status, Long createBy, LocalDateTime createTime, Long updateBy, LocalDateTime updateTime) {
        super(Category.CATEGORY);

        setId(id);
        setName(name);
        setPid(pid);
        setDescription(description);
        setStatus(status);
        setCreateBy(createBy);
        setCreateTime(createTime);
        setUpdateBy(updateBy);
        setUpdateTime(updateTime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CategoryRecord
     */
    public CategoryRecord(me.myblog.framework.domain.jooq.tables.pojos.Category value) {
        super(Category.CATEGORY);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setPid(value.getPid());
            setDescription(value.getDescription());
            setStatus(value.getStatus());
            setCreateBy(value.getCreateBy());
            setCreateTime(value.getCreateTime());
            setUpdateBy(value.getUpdateBy());
            setUpdateTime(value.getUpdateTime());
            resetChangedOnNotNull();
        }
    }
}
