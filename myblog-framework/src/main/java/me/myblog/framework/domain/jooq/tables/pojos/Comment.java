/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables.pojos;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import me.myblog.framework.domain.jooq.tables.interfaces.IComment;


/**
 * 评论表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "comment",
    schema = "myblog"
)
public class Comment implements IComment {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final String type;
    private final Long articleId;
    private final Long rootId;
    private final String content;
    private final Long toCommentUserId;
    private final Long toCommentId;
    private final Long createBy;
    private final LocalDateTime createTime;
    private final Long updateBy;
    private final LocalDateTime updateTime;

    public Comment(IComment value) {
        this.id = value.getId();
        this.type = value.getType();
        this.articleId = value.getArticleId();
        this.rootId = value.getRootId();
        this.content = value.getContent();
        this.toCommentUserId = value.getToCommentUserId();
        this.toCommentId = value.getToCommentId();
        this.createBy = value.getCreateBy();
        this.createTime = value.getCreateTime();
        this.updateBy = value.getUpdateBy();
        this.updateTime = value.getUpdateTime();
    }

    public Comment(
        Long id,
        String type,
        Long articleId,
        Long rootId,
        String content,
        Long toCommentUserId,
        Long toCommentId,
        Long createBy,
        LocalDateTime createTime,
        Long updateBy,
        LocalDateTime updateTime
    ) {
        this.id = id;
        this.type = type;
        this.articleId = articleId;
        this.rootId = rootId;
        this.content = content;
        this.toCommentUserId = toCommentUserId;
        this.toCommentId = toCommentId;
        this.createBy = createBy;
        this.createTime = createTime;
        this.updateBy = updateBy;
        this.updateTime = updateTime;
    }

    /**
     * Getter for <code>myblog.comment.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>myblog.comment.type</code>. 评论类型（0代表文章评论，1代表友链评论）
     */
    @Column(name = "type", length = 1)
    @Size(max = 1)
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Getter for <code>myblog.comment.article_id</code>. 文章id
     */
    @Column(name = "article_id")
    @Override
    public Long getArticleId() {
        return this.articleId;
    }

    /**
     * Getter for <code>myblog.comment.root_id</code>. 根评论id
     */
    @Column(name = "root_id")
    @Override
    public Long getRootId() {
        return this.rootId;
    }

    /**
     * Getter for <code>myblog.comment.content</code>. 评论内容
     */
    @Column(name = "content", length = 512)
    @Size(max = 512)
    @Override
    public String getContent() {
        return this.content;
    }

    /**
     * Getter for <code>myblog.comment.to_comment_user_id</code>.
     * 所回复的目标评论的userid
     */
    @Column(name = "to_comment_user_id")
    @Override
    public Long getToCommentUserId() {
        return this.toCommentUserId;
    }

    /**
     * Getter for <code>myblog.comment.to_comment_id</code>. 回复目标评论id
     */
    @Column(name = "to_comment_id")
    @Override
    public Long getToCommentId() {
        return this.toCommentId;
    }

    /**
     * Getter for <code>myblog.comment.create_by</code>.
     */
    @Column(name = "create_by")
    @Override
    public Long getCreateBy() {
        return this.createBy;
    }

    /**
     * Getter for <code>myblog.comment.create_time</code>.
     */
    @Column(name = "create_time")
    @Override
    public LocalDateTime getCreateTime() {
        return this.createTime;
    }

    /**
     * Getter for <code>myblog.comment.update_by</code>.
     */
    @Column(name = "update_by")
    @Override
    public Long getUpdateBy() {
        return this.updateBy;
    }

    /**
     * Getter for <code>myblog.comment.update_time</code>.
     */
    @Column(name = "update_time")
    @Override
    public LocalDateTime getUpdateTime() {
        return this.updateTime;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Comment other = (Comment) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        if (this.articleId == null) {
            if (other.articleId != null)
                return false;
        }
        else if (!this.articleId.equals(other.articleId))
            return false;
        if (this.rootId == null) {
            if (other.rootId != null)
                return false;
        }
        else if (!this.rootId.equals(other.rootId))
            return false;
        if (this.content == null) {
            if (other.content != null)
                return false;
        }
        else if (!this.content.equals(other.content))
            return false;
        if (this.toCommentUserId == null) {
            if (other.toCommentUserId != null)
                return false;
        }
        else if (!this.toCommentUserId.equals(other.toCommentUserId))
            return false;
        if (this.toCommentId == null) {
            if (other.toCommentId != null)
                return false;
        }
        else if (!this.toCommentId.equals(other.toCommentId))
            return false;
        if (this.createBy == null) {
            if (other.createBy != null)
                return false;
        }
        else if (!this.createBy.equals(other.createBy))
            return false;
        if (this.createTime == null) {
            if (other.createTime != null)
                return false;
        }
        else if (!this.createTime.equals(other.createTime))
            return false;
        if (this.updateBy == null) {
            if (other.updateBy != null)
                return false;
        }
        else if (!this.updateBy.equals(other.updateBy))
            return false;
        if (this.updateTime == null) {
            if (other.updateTime != null)
                return false;
        }
        else if (!this.updateTime.equals(other.updateTime))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        result = prime * result + ((this.articleId == null) ? 0 : this.articleId.hashCode());
        result = prime * result + ((this.rootId == null) ? 0 : this.rootId.hashCode());
        result = prime * result + ((this.content == null) ? 0 : this.content.hashCode());
        result = prime * result + ((this.toCommentUserId == null) ? 0 : this.toCommentUserId.hashCode());
        result = prime * result + ((this.toCommentId == null) ? 0 : this.toCommentId.hashCode());
        result = prime * result + ((this.createBy == null) ? 0 : this.createBy.hashCode());
        result = prime * result + ((this.createTime == null) ? 0 : this.createTime.hashCode());
        result = prime * result + ((this.updateBy == null) ? 0 : this.updateBy.hashCode());
        result = prime * result + ((this.updateTime == null) ? 0 : this.updateTime.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Comment (");

        sb.append(id);
        sb.append(", ").append(type);
        sb.append(", ").append(articleId);
        sb.append(", ").append(rootId);
        sb.append(", ").append(content);
        sb.append(", ").append(toCommentUserId);
        sb.append(", ").append(toCommentId);
        sb.append(", ").append(createBy);
        sb.append(", ").append(createTime);
        sb.append(", ").append(updateBy);
        sb.append(", ").append(updateTime);

        sb.append(")");
        return sb.toString();
    }
}
