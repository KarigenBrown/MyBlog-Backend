/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import me.myblog.framework.domain.jooq.Keys;
import me.myblog.framework.domain.jooq.Myblog;
import me.myblog.framework.domain.jooq.tables.records.UserRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 用户表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>myblog.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>myblog.user.id</code>. 主键
     */
    public final TableField<UserRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "主键");

    /**
     * The column <code>myblog.user.user_name</code>. 用户名
     */
    public final TableField<UserRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "用户名");

    /**
     * The column <code>myblog.user.nick_name</code>. 昵称
     */
    public final TableField<UserRecord, String> NICK_NAME = createField(DSL.name("nick_name"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "昵称");

    /**
     * The column <code>myblog.user.password</code>. 密码
     */
    public final TableField<UserRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(64).nullable(false).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "密码");

    /**
     * The column <code>myblog.user.type</code>. 用户类型（0代表普通用户，1代表管理员）
     */
    public final TableField<UserRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CHAR(1).defaultValue(DSL.inline("0", SQLDataType.CHAR)), this, "用户类型（0代表普通用户，1代表管理员）");

    /**
     * The column <code>myblog.user.status</code>. 账号状态（0正常，1停用）
     */
    public final TableField<UserRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CHAR(1).defaultValue(DSL.inline("0", SQLDataType.CHAR)), this, "账号状态（0正常，1停用）");

    /**
     * The column <code>myblog.user.email</code>. 邮箱
     */
    public final TableField<UserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(64), this, "邮箱");

    /**
     * The column <code>myblog.user.phonenumber</code>. 手机号
     */
    public final TableField<UserRecord, String> PHONENUMBER = createField(DSL.name("phonenumber"), SQLDataType.VARCHAR(32), this, "手机号");

    /**
     * The column <code>myblog.user.sex</code>. 用户性别（0男，1女，2未知）
     */
    public final TableField<UserRecord, String> SEX = createField(DSL.name("sex"), SQLDataType.CHAR(1), this, "用户性别（0男，1女，2未知）");

    /**
     * The column <code>myblog.user.avatar</code>. 头像
     */
    public final TableField<UserRecord, String> AVATAR = createField(DSL.name("avatar"), SQLDataType.VARCHAR(128), this, "头像");

    /**
     * The column <code>myblog.user.create_by</code>. 创建人的用户id
     */
    public final TableField<UserRecord, Long> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.BIGINT, this, "创建人的用户id");

    /**
     * The column <code>myblog.user.create_time</code>. 创建时间
     */
    public final TableField<UserRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "创建时间");

    /**
     * The column <code>myblog.user.update_by</code>. 更新人
     */
    public final TableField<UserRecord, Long> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.BIGINT, this, "更新人");

    /**
     * The column <code>myblog.user.update_time</code>. 更新时间
     */
    public final TableField<UserRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "更新时间");

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("用户表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>myblog.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>myblog.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>myblog.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Myblog.MYBLOG;
    }

    @Override
    public Identity<UserRecord, Long> getIdentity() {
        return (Identity<UserRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    @Override
    public User as(Table<?> alias) {
        return new User(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Table<?> name) {
        return new User(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, String, String, String, String, String, String, String, String, String, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
