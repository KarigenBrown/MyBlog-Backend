/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables.records;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import me.myblog.framework.domain.jooq.tables.Tag;
import me.myblog.framework.domain.jooq.tables.interfaces.ITag;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 标签
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "tag",
    schema = "myblog"
)
public class TagRecord extends UpdatableRecordImpl<TagRecord> implements Record7<Long, String, Long, LocalDateTime, Long, LocalDateTime, String>, ITag {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>myblog.tag.id</code>.
     */
    public TagRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>myblog.tag.id</code>.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>myblog.tag.name</code>. 标签名
     */
    public TagRecord setName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>myblog.tag.name</code>. 标签名
     */
    @Column(name = "name", length = 128)
    @Size(max = 128)
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>myblog.tag.create_by</code>.
     */
    public TagRecord setCreateBy(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>myblog.tag.create_by</code>.
     */
    @Column(name = "create_by")
    @Override
    public Long getCreateBy() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>myblog.tag.create_time</code>.
     */
    public TagRecord setCreateTime(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>myblog.tag.create_time</code>.
     */
    @Column(name = "create_time")
    @Override
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>myblog.tag.update_by</code>.
     */
    public TagRecord setUpdateBy(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>myblog.tag.update_by</code>.
     */
    @Column(name = "update_by")
    @Override
    public Long getUpdateBy() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>myblog.tag.update_time</code>.
     */
    public TagRecord setUpdateTime(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>myblog.tag.update_time</code>.
     */
    @Column(name = "update_time")
    @Override
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>myblog.tag.remark</code>. 备注
     */
    public TagRecord setRemark(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>myblog.tag.remark</code>. 备注
     */
    @Column(name = "remark", length = 500)
    @Size(max = 500)
    @Override
    public String getRemark() {
        return (String) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Long, LocalDateTime, Long, LocalDateTime, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, String, Long, LocalDateTime, Long, LocalDateTime, String> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Tag.TAG.ID;
    }

    @Override
    public Field<String> field2() {
        return Tag.TAG.NAME;
    }

    @Override
    public Field<Long> field3() {
        return Tag.TAG.CREATE_BY;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Tag.TAG.CREATE_TIME;
    }

    @Override
    public Field<Long> field5() {
        return Tag.TAG.UPDATE_BY;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Tag.TAG.UPDATE_TIME;
    }

    @Override
    public Field<String> field7() {
        return Tag.TAG.REMARK;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Long component3() {
        return getCreateBy();
    }

    @Override
    public LocalDateTime component4() {
        return getCreateTime();
    }

    @Override
    public Long component5() {
        return getUpdateBy();
    }

    @Override
    public LocalDateTime component6() {
        return getUpdateTime();
    }

    @Override
    public String component7() {
        return getRemark();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Long value3() {
        return getCreateBy();
    }

    @Override
    public LocalDateTime value4() {
        return getCreateTime();
    }

    @Override
    public Long value5() {
        return getUpdateBy();
    }

    @Override
    public LocalDateTime value6() {
        return getUpdateTime();
    }

    @Override
    public String value7() {
        return getRemark();
    }

    @Override
    public TagRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TagRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public TagRecord value3(Long value) {
        setCreateBy(value);
        return this;
    }

    @Override
    public TagRecord value4(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public TagRecord value5(Long value) {
        setUpdateBy(value);
        return this;
    }

    @Override
    public TagRecord value6(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public TagRecord value7(String value) {
        setRemark(value);
        return this;
    }

    @Override
    public TagRecord values(Long value1, String value2, Long value3, LocalDateTime value4, Long value5, LocalDateTime value6, String value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    public void from(ITag from) {
        setId(from.getId());
        setName(from.getName());
        setCreateBy(from.getCreateBy());
        setCreateTime(from.getCreateTime());
        setUpdateBy(from.getUpdateBy());
        setUpdateTime(from.getUpdateTime());
        setRemark(from.getRemark());
        resetChangedOnNotNull();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TagRecord
     */
    public TagRecord() {
        super(Tag.TAG);
    }

    /**
     * Create a detached, initialised TagRecord
     */
    public TagRecord(Long id, String name, Long createBy, LocalDateTime createTime, Long updateBy, LocalDateTime updateTime, String remark) {
        super(Tag.TAG);

        setId(id);
        setName(name);
        setCreateBy(createBy);
        setCreateTime(createTime);
        setUpdateBy(updateBy);
        setUpdateTime(updateTime);
        setRemark(remark);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised TagRecord
     */
    public TagRecord(me.myblog.framework.domain.jooq.tables.pojos.Tag value) {
        super(Tag.TAG);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setCreateBy(value.getCreateBy());
            setCreateTime(value.getCreateTime());
            setUpdateBy(value.getUpdateBy());
            setUpdateTime(value.getUpdateTime());
            setRemark(value.getRemark());
            resetChangedOnNotNull();
        }
    }
}
