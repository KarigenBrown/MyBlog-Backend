/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import me.myblog.framework.domain.jooq.Keys;
import me.myblog.framework.domain.jooq.Myblog;
import me.myblog.framework.domain.jooq.tables.records.LinkRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 友链
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Link extends TableImpl<LinkRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>myblog.link</code>
     */
    public static final Link LINK = new Link();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinkRecord> getRecordType() {
        return LinkRecord.class;
    }

    /**
     * The column <code>myblog.link.id</code>.
     */
    public final TableField<LinkRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>myblog.link.name</code>.
     */
    public final TableField<LinkRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>myblog.link.logo</code>.
     */
    public final TableField<LinkRecord, String> LOGO = createField(DSL.name("logo"), SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>myblog.link.description</code>.
     */
    public final TableField<LinkRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>myblog.link.address</code>. 网站地址
     */
    public final TableField<LinkRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(128), this, "网站地址");

    /**
     * The column <code>myblog.link.status</code>. 审核状态
     * (0代表审核通过，1代表审核未通过，2代表未审核)
     */
    public final TableField<LinkRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.CHAR(1).defaultValue(DSL.inline("2", SQLDataType.CHAR)), this, "审核状态 (0代表审核通过，1代表审核未通过，2代表未审核)");

    /**
     * The column <code>myblog.link.create_by</code>.
     */
    public final TableField<LinkRecord, Long> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>myblog.link.create_time</code>.
     */
    public final TableField<LinkRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>myblog.link.update_by</code>.
     */
    public final TableField<LinkRecord, Long> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>myblog.link.update_time</code>.
     */
    public final TableField<LinkRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "");

    private Link(Name alias, Table<LinkRecord> aliased) {
        this(alias, aliased, null);
    }

    private Link(Name alias, Table<LinkRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("友链"), TableOptions.table());
    }

    /**
     * Create an aliased <code>myblog.link</code> table reference
     */
    public Link(String alias) {
        this(DSL.name(alias), LINK);
    }

    /**
     * Create an aliased <code>myblog.link</code> table reference
     */
    public Link(Name alias) {
        this(alias, LINK);
    }

    /**
     * Create a <code>myblog.link</code> table reference
     */
    public Link() {
        this(DSL.name("link"), null);
    }

    public <O extends Record> Link(Table<O> child, ForeignKey<O, LinkRecord> key) {
        super(child, key, LINK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Myblog.MYBLOG;
    }

    @Override
    public Identity<LinkRecord, Long> getIdentity() {
        return (Identity<LinkRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LinkRecord> getPrimaryKey() {
        return Keys.KEY_LINK_PRIMARY;
    }

    @Override
    public Link as(String alias) {
        return new Link(DSL.name(alias), this);
    }

    @Override
    public Link as(Name alias) {
        return new Link(alias, this);
    }

    @Override
    public Link as(Table<?> alias) {
        return new Link(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Link rename(String name) {
        return new Link(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Link rename(Name name) {
        return new Link(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Link rename(Table<?> name) {
        return new Link(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, String, String, String, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Long, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
