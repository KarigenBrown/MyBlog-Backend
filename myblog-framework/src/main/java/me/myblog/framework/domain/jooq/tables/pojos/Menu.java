/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables.pojos;


import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

import java.time.LocalDateTime;

import me.myblog.framework.domain.jooq.tables.interfaces.IMenu;


/**
 * 菜单权限表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Entity
@Table(
    name = "menu",
    schema = "myblog"
)
public class Menu implements IMenu {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final String menuName;
    private final Long parentId;
    private final Integer orderNum;
    private final String path;
    private final String component;
    private final Integer isFrame;
    private final String menuType;
    private final String visible;
    private final String status;
    private final String perms;
    private final String icon;
    private final Long createBy;
    private final LocalDateTime createTime;
    private final Long updateBy;
    private final LocalDateTime updateTime;
    private final String remark;

    public Menu(IMenu value) {
        this.id = value.getId();
        this.menuName = value.getMenuName();
        this.parentId = value.getParentId();
        this.orderNum = value.getOrderNum();
        this.path = value.getPath();
        this.component = value.getComponent();
        this.isFrame = value.getIsFrame();
        this.menuType = value.getMenuType();
        this.visible = value.getVisible();
        this.status = value.getStatus();
        this.perms = value.getPerms();
        this.icon = value.getIcon();
        this.createBy = value.getCreateBy();
        this.createTime = value.getCreateTime();
        this.updateBy = value.getUpdateBy();
        this.updateTime = value.getUpdateTime();
        this.remark = value.getRemark();
    }

    public Menu(
        Long id,
        String menuName,
        Long parentId,
        Integer orderNum,
        String path,
        String component,
        Integer isFrame,
        String menuType,
        String visible,
        String status,
        String perms,
        String icon,
        Long createBy,
        LocalDateTime createTime,
        Long updateBy,
        LocalDateTime updateTime,
        String remark
    ) {
        this.id = id;
        this.menuName = menuName;
        this.parentId = parentId;
        this.orderNum = orderNum;
        this.path = path;
        this.component = component;
        this.isFrame = isFrame;
        this.menuType = menuType;
        this.visible = visible;
        this.status = status;
        this.perms = perms;
        this.icon = icon;
        this.createBy = createBy;
        this.createTime = createTime;
        this.updateBy = updateBy;
        this.updateTime = updateTime;
        this.remark = remark;
    }

    /**
     * Getter for <code>myblog.menu.id</code>. 菜单ID
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id")
    @Override
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>myblog.menu.menu_name</code>. 菜单名称
     */
    @Column(name = "menu_name", nullable = false, length = 50)
    @NotNull
    @Size(max = 50)
    @Override
    public String getMenuName() {
        return this.menuName;
    }

    /**
     * Getter for <code>myblog.menu.parent_id</code>. 父菜单ID
     */
    @Column(name = "parent_id")
    @Override
    public Long getParentId() {
        return this.parentId;
    }

    /**
     * Getter for <code>myblog.menu.order_num</code>. 显示顺序
     */
    @Column(name = "order_num")
    @Override
    public Integer getOrderNum() {
        return this.orderNum;
    }

    /**
     * Getter for <code>myblog.menu.path</code>. 路由地址
     */
    @Column(name = "path", length = 200)
    @Size(max = 200)
    @Override
    public String getPath() {
        return this.path;
    }

    /**
     * Getter for <code>myblog.menu.component</code>. 组件路径
     */
    @Column(name = "component", length = 255)
    @Size(max = 255)
    @Override
    public String getComponent() {
        return this.component;
    }

    /**
     * Getter for <code>myblog.menu.is_frame</code>. 是否为外链（0是，1否）
     */
    @Column(name = "is_frame")
    @Override
    public Integer getIsFrame() {
        return this.isFrame;
    }

    /**
     * Getter for <code>myblog.menu.menu_type</code>. 菜单类型（M目录，C菜单，F按钮）
     */
    @Column(name = "menu_type", length = 1)
    @Size(max = 1)
    @Override
    public String getMenuType() {
        return this.menuType;
    }

    /**
     * Getter for <code>myblog.menu.visible</code>. 菜单状态（0显示，1隐藏）
     */
    @Column(name = "visible", length = 1)
    @Size(max = 1)
    @Override
    public String getVisible() {
        return this.visible;
    }

    /**
     * Getter for <code>myblog.menu.status</code>. 菜单状态（0正常，1停用）
     */
    @Column(name = "status", length = 1)
    @Size(max = 1)
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Getter for <code>myblog.menu.perms</code>. 权限标识
     */
    @Column(name = "perms", length = 100)
    @Size(max = 100)
    @Override
    public String getPerms() {
        return this.perms;
    }

    /**
     * Getter for <code>myblog.menu.icon</code>. 菜单图标
     */
    @Column(name = "icon", length = 100)
    @Size(max = 100)
    @Override
    public String getIcon() {
        return this.icon;
    }

    /**
     * Getter for <code>myblog.menu.create_by</code>. 创建者
     */
    @Column(name = "create_by")
    @Override
    public Long getCreateBy() {
        return this.createBy;
    }

    /**
     * Getter for <code>myblog.menu.create_time</code>. 创建时间
     */
    @Column(name = "create_time")
    @Override
    public LocalDateTime getCreateTime() {
        return this.createTime;
    }

    /**
     * Getter for <code>myblog.menu.update_by</code>. 更新者
     */
    @Column(name = "update_by")
    @Override
    public Long getUpdateBy() {
        return this.updateBy;
    }

    /**
     * Getter for <code>myblog.menu.update_time</code>. 更新时间
     */
    @Column(name = "update_time")
    @Override
    public LocalDateTime getUpdateTime() {
        return this.updateTime;
    }

    /**
     * Getter for <code>myblog.menu.remark</code>. 备注
     */
    @Column(name = "remark", length = 500)
    @Size(max = 500)
    @Override
    public String getRemark() {
        return this.remark;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Menu other = (Menu) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.menuName == null) {
            if (other.menuName != null)
                return false;
        }
        else if (!this.menuName.equals(other.menuName))
            return false;
        if (this.parentId == null) {
            if (other.parentId != null)
                return false;
        }
        else if (!this.parentId.equals(other.parentId))
            return false;
        if (this.orderNum == null) {
            if (other.orderNum != null)
                return false;
        }
        else if (!this.orderNum.equals(other.orderNum))
            return false;
        if (this.path == null) {
            if (other.path != null)
                return false;
        }
        else if (!this.path.equals(other.path))
            return false;
        if (this.component == null) {
            if (other.component != null)
                return false;
        }
        else if (!this.component.equals(other.component))
            return false;
        if (this.isFrame == null) {
            if (other.isFrame != null)
                return false;
        }
        else if (!this.isFrame.equals(other.isFrame))
            return false;
        if (this.menuType == null) {
            if (other.menuType != null)
                return false;
        }
        else if (!this.menuType.equals(other.menuType))
            return false;
        if (this.visible == null) {
            if (other.visible != null)
                return false;
        }
        else if (!this.visible.equals(other.visible))
            return false;
        if (this.status == null) {
            if (other.status != null)
                return false;
        }
        else if (!this.status.equals(other.status))
            return false;
        if (this.perms == null) {
            if (other.perms != null)
                return false;
        }
        else if (!this.perms.equals(other.perms))
            return false;
        if (this.icon == null) {
            if (other.icon != null)
                return false;
        }
        else if (!this.icon.equals(other.icon))
            return false;
        if (this.createBy == null) {
            if (other.createBy != null)
                return false;
        }
        else if (!this.createBy.equals(other.createBy))
            return false;
        if (this.createTime == null) {
            if (other.createTime != null)
                return false;
        }
        else if (!this.createTime.equals(other.createTime))
            return false;
        if (this.updateBy == null) {
            if (other.updateBy != null)
                return false;
        }
        else if (!this.updateBy.equals(other.updateBy))
            return false;
        if (this.updateTime == null) {
            if (other.updateTime != null)
                return false;
        }
        else if (!this.updateTime.equals(other.updateTime))
            return false;
        if (this.remark == null) {
            if (other.remark != null)
                return false;
        }
        else if (!this.remark.equals(other.remark))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.menuName == null) ? 0 : this.menuName.hashCode());
        result = prime * result + ((this.parentId == null) ? 0 : this.parentId.hashCode());
        result = prime * result + ((this.orderNum == null) ? 0 : this.orderNum.hashCode());
        result = prime * result + ((this.path == null) ? 0 : this.path.hashCode());
        result = prime * result + ((this.component == null) ? 0 : this.component.hashCode());
        result = prime * result + ((this.isFrame == null) ? 0 : this.isFrame.hashCode());
        result = prime * result + ((this.menuType == null) ? 0 : this.menuType.hashCode());
        result = prime * result + ((this.visible == null) ? 0 : this.visible.hashCode());
        result = prime * result + ((this.status == null) ? 0 : this.status.hashCode());
        result = prime * result + ((this.perms == null) ? 0 : this.perms.hashCode());
        result = prime * result + ((this.icon == null) ? 0 : this.icon.hashCode());
        result = prime * result + ((this.createBy == null) ? 0 : this.createBy.hashCode());
        result = prime * result + ((this.createTime == null) ? 0 : this.createTime.hashCode());
        result = prime * result + ((this.updateBy == null) ? 0 : this.updateBy.hashCode());
        result = prime * result + ((this.updateTime == null) ? 0 : this.updateTime.hashCode());
        result = prime * result + ((this.remark == null) ? 0 : this.remark.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Menu (");

        sb.append(id);
        sb.append(", ").append(menuName);
        sb.append(", ").append(parentId);
        sb.append(", ").append(orderNum);
        sb.append(", ").append(path);
        sb.append(", ").append(component);
        sb.append(", ").append(isFrame);
        sb.append(", ").append(menuType);
        sb.append(", ").append(visible);
        sb.append(", ").append(status);
        sb.append(", ").append(perms);
        sb.append(", ").append(icon);
        sb.append(", ").append(createBy);
        sb.append(", ").append(createTime);
        sb.append(", ").append(updateBy);
        sb.append(", ").append(updateTime);
        sb.append(", ").append(remark);

        sb.append(")");
        return sb.toString();
    }
}
