/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import me.myblog.framework.domain.jooq.Keys;
import me.myblog.framework.domain.jooq.Myblog;
import me.myblog.framework.domain.jooq.tables.records.CommentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 评论表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Comment extends TableImpl<CommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>myblog.comment</code>
     */
    public static final Comment COMMENT = new Comment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CommentRecord> getRecordType() {
        return CommentRecord.class;
    }

    /**
     * The column <code>myblog.comment.id</code>.
     */
    public final TableField<CommentRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>myblog.comment.type</code>. 评论类型（0代表文章评论，1代表友链评论）
     */
    public final TableField<CommentRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.CHAR(1).defaultValue(DSL.inline("0", SQLDataType.CHAR)), this, "评论类型（0代表文章评论，1代表友链评论）");

    /**
     * The column <code>myblog.comment.article_id</code>. 文章id
     */
    public final TableField<CommentRecord, Long> ARTICLE_ID = createField(DSL.name("article_id"), SQLDataType.BIGINT, this, "文章id");

    /**
     * The column <code>myblog.comment.root_id</code>. 根评论id
     */
    public final TableField<CommentRecord, Long> ROOT_ID = createField(DSL.name("root_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("-1", SQLDataType.BIGINT)), this, "根评论id");

    /**
     * The column <code>myblog.comment.content</code>. 评论内容
     */
    public final TableField<CommentRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR(512), this, "评论内容");

    /**
     * The column <code>myblog.comment.to_comment_user_id</code>.
     * 所回复的目标评论的userid
     */
    public final TableField<CommentRecord, Long> TO_COMMENT_USER_ID = createField(DSL.name("to_comment_user_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("-1", SQLDataType.BIGINT)), this, "所回复的目标评论的userid");

    /**
     * The column <code>myblog.comment.to_comment_id</code>. 回复目标评论id
     */
    public final TableField<CommentRecord, Long> TO_COMMENT_ID = createField(DSL.name("to_comment_id"), SQLDataType.BIGINT.defaultValue(DSL.inline("-1", SQLDataType.BIGINT)), this, "回复目标评论id");

    /**
     * The column <code>myblog.comment.create_by</code>.
     */
    public final TableField<CommentRecord, Long> CREATE_BY = createField(DSL.name("create_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>myblog.comment.create_time</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>myblog.comment.update_by</code>.
     */
    public final TableField<CommentRecord, Long> UPDATE_BY = createField(DSL.name("update_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>myblog.comment.update_time</code>.
     */
    public final TableField<CommentRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0), this, "");

    private Comment(Name alias, Table<CommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Comment(Name alias, Table<CommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("评论表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>myblog.comment</code> table reference
     */
    public Comment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>myblog.comment</code> table reference
     */
    public Comment(Name alias) {
        this(alias, COMMENT);
    }

    /**
     * Create a <code>myblog.comment</code> table reference
     */
    public Comment() {
        this(DSL.name("comment"), null);
    }

    public <O extends Record> Comment(Table<O> child, ForeignKey<O, CommentRecord> key) {
        super(child, key, COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Myblog.MYBLOG;
    }

    @Override
    public Identity<CommentRecord, Long> getIdentity() {
        return (Identity<CommentRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CommentRecord> getPrimaryKey() {
        return Keys.KEY_COMMENT_PRIMARY;
    }

    @Override
    public Comment as(String alias) {
        return new Comment(DSL.name(alias), this);
    }

    @Override
    public Comment as(Name alias) {
        return new Comment(alias, this);
    }

    @Override
    public Comment as(Table<?> alias) {
        return new Comment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(String name) {
        return new Comment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Name name) {
        return new Comment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Comment rename(Table<?> name) {
        return new Comment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, Long, Long, String, Long, Long, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super Long, ? super String, ? super Long, ? super Long, ? super String, ? super Long, ? super Long, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
