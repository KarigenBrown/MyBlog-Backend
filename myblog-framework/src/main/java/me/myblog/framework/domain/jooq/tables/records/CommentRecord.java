/*
 * This file is generated by jOOQ.
 */
package me.myblog.framework.domain.jooq.tables.records;


import java.time.LocalDateTime;

import me.myblog.framework.domain.jooq.tables.Comment;
import me.myblog.framework.domain.jooq.tables.interfaces.IComment;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 评论表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class CommentRecord extends UpdatableRecordImpl<CommentRecord> implements Record11<Long, String, Long, Long, String, Long, Long, Long, LocalDateTime, Long, LocalDateTime>, IComment {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>myblog.comment.id</code>.
     */
    @Override
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>myblog.comment.id</code>.
     */
    @Override
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>myblog.comment.type</code>. 评论类型（0代表文章评论，1代表友链评论）
     */
    @Override
    public void setType(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>myblog.comment.type</code>. 评论类型（0代表文章评论，1代表友链评论）
     */
    @Override
    public String getType() {
        return (String) get(1);
    }

    /**
     * Setter for <code>myblog.comment.article_id</code>. 文章id
     */
    @Override
    public void setArticleId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>myblog.comment.article_id</code>. 文章id
     */
    @Override
    public Long getArticleId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>myblog.comment.root_id</code>. 根评论id
     */
    @Override
    public void setRootId(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>myblog.comment.root_id</code>. 根评论id
     */
    @Override
    public Long getRootId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>myblog.comment.content</code>. 评论内容
     */
    @Override
    public void setContent(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>myblog.comment.content</code>. 评论内容
     */
    @Override
    public String getContent() {
        return (String) get(4);
    }

    /**
     * Setter for <code>myblog.comment.to_comment_user_id</code>.
     * 所回复的目标评论的userid
     */
    @Override
    public void setToCommentUserId(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>myblog.comment.to_comment_user_id</code>.
     * 所回复的目标评论的userid
     */
    @Override
    public Long getToCommentUserId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>myblog.comment.to_comment_id</code>. 回复目标评论id
     */
    @Override
    public void setToCommentId(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>myblog.comment.to_comment_id</code>. 回复目标评论id
     */
    @Override
    public Long getToCommentId() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>myblog.comment.create_by</code>.
     */
    @Override
    public void setCreateBy(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>myblog.comment.create_by</code>.
     */
    @Override
    public Long getCreateBy() {
        return (Long) get(7);
    }

    /**
     * Setter for <code>myblog.comment.create_time</code>.
     */
    @Override
    public void setCreateTime(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>myblog.comment.create_time</code>.
     */
    @Override
    public LocalDateTime getCreateTime() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>myblog.comment.update_by</code>.
     */
    @Override
    public void setUpdateBy(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>myblog.comment.update_by</code>.
     */
    @Override
    public Long getUpdateBy() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>myblog.comment.update_time</code>.
     */
    @Override
    public void setUpdateTime(LocalDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>myblog.comment.update_time</code>.
     */
    @Override
    public LocalDateTime getUpdateTime() {
        return (LocalDateTime) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Long, String, Long, Long, String, Long, Long, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Long, String, Long, Long, String, Long, Long, Long, LocalDateTime, Long, LocalDateTime> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Comment.COMMENT.ID;
    }

    @Override
    public Field<String> field2() {
        return Comment.COMMENT.TYPE;
    }

    @Override
    public Field<Long> field3() {
        return Comment.COMMENT.ARTICLE_ID;
    }

    @Override
    public Field<Long> field4() {
        return Comment.COMMENT.ROOT_ID;
    }

    @Override
    public Field<String> field5() {
        return Comment.COMMENT.CONTENT;
    }

    @Override
    public Field<Long> field6() {
        return Comment.COMMENT.TO_COMMENT_USER_ID;
    }

    @Override
    public Field<Long> field7() {
        return Comment.COMMENT.TO_COMMENT_ID;
    }

    @Override
    public Field<Long> field8() {
        return Comment.COMMENT.CREATE_BY;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return Comment.COMMENT.CREATE_TIME;
    }

    @Override
    public Field<Long> field10() {
        return Comment.COMMENT.UPDATE_BY;
    }

    @Override
    public Field<LocalDateTime> field11() {
        return Comment.COMMENT.UPDATE_TIME;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getType();
    }

    @Override
    public Long component3() {
        return getArticleId();
    }

    @Override
    public Long component4() {
        return getRootId();
    }

    @Override
    public String component5() {
        return getContent();
    }

    @Override
    public Long component6() {
        return getToCommentUserId();
    }

    @Override
    public Long component7() {
        return getToCommentId();
    }

    @Override
    public Long component8() {
        return getCreateBy();
    }

    @Override
    public LocalDateTime component9() {
        return getCreateTime();
    }

    @Override
    public Long component10() {
        return getUpdateBy();
    }

    @Override
    public LocalDateTime component11() {
        return getUpdateTime();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getType();
    }

    @Override
    public Long value3() {
        return getArticleId();
    }

    @Override
    public Long value4() {
        return getRootId();
    }

    @Override
    public String value5() {
        return getContent();
    }

    @Override
    public Long value6() {
        return getToCommentUserId();
    }

    @Override
    public Long value7() {
        return getToCommentId();
    }

    @Override
    public Long value8() {
        return getCreateBy();
    }

    @Override
    public LocalDateTime value9() {
        return getCreateTime();
    }

    @Override
    public Long value10() {
        return getUpdateBy();
    }

    @Override
    public LocalDateTime value11() {
        return getUpdateTime();
    }

    @Override
    public CommentRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public CommentRecord value2(String value) {
        setType(value);
        return this;
    }

    @Override
    public CommentRecord value3(Long value) {
        setArticleId(value);
        return this;
    }

    @Override
    public CommentRecord value4(Long value) {
        setRootId(value);
        return this;
    }

    @Override
    public CommentRecord value5(String value) {
        setContent(value);
        return this;
    }

    @Override
    public CommentRecord value6(Long value) {
        setToCommentUserId(value);
        return this;
    }

    @Override
    public CommentRecord value7(Long value) {
        setToCommentId(value);
        return this;
    }

    @Override
    public CommentRecord value8(Long value) {
        setCreateBy(value);
        return this;
    }

    @Override
    public CommentRecord value9(LocalDateTime value) {
        setCreateTime(value);
        return this;
    }

    @Override
    public CommentRecord value10(Long value) {
        setUpdateBy(value);
        return this;
    }

    @Override
    public CommentRecord value11(LocalDateTime value) {
        setUpdateTime(value);
        return this;
    }

    @Override
    public CommentRecord values(Long value1, String value2, Long value3, Long value4, String value5, Long value6, Long value7, Long value8, LocalDateTime value9, Long value10, LocalDateTime value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IComment from) {
        setId(from.getId());
        setType(from.getType());
        setArticleId(from.getArticleId());
        setRootId(from.getRootId());
        setContent(from.getContent());
        setToCommentUserId(from.getToCommentUserId());
        setToCommentId(from.getToCommentId());
        setCreateBy(from.getCreateBy());
        setCreateTime(from.getCreateTime());
        setUpdateBy(from.getUpdateBy());
        setUpdateTime(from.getUpdateTime());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IComment> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CommentRecord
     */
    public CommentRecord() {
        super(Comment.COMMENT);
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(Long id, String type, Long articleId, Long rootId, String content, Long toCommentUserId, Long toCommentId, Long createBy, LocalDateTime createTime, Long updateBy, LocalDateTime updateTime) {
        super(Comment.COMMENT);

        setId(id);
        setType(type);
        setArticleId(articleId);
        setRootId(rootId);
        setContent(content);
        setToCommentUserId(toCommentUserId);
        setToCommentId(toCommentId);
        setCreateBy(createBy);
        setCreateTime(createTime);
        setUpdateBy(updateBy);
        setUpdateTime(updateTime);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised CommentRecord
     */
    public CommentRecord(me.myblog.framework.domain.jooq.tables.pojos.Comment value) {
        super(Comment.COMMENT);

        if (value != null) {
            setId(value.getId());
            setType(value.getType());
            setArticleId(value.getArticleId());
            setRootId(value.getRootId());
            setContent(value.getContent());
            setToCommentUserId(value.getToCommentUserId());
            setToCommentId(value.getToCommentId());
            setCreateBy(value.getCreateBy());
            setCreateTime(value.getCreateTime());
            setUpdateBy(value.getUpdateBy());
            setUpdateTime(value.getUpdateTime());
            resetChangedOnNotNull();
        }
    }
}
